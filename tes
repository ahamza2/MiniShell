#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "minishell.h"

int is_whitespace(char c)
{
    if (c == ' ' || c == '\t')
        return 1;
    return 0;
}

int is_a_spchar(char c)
{
    char special_chars[] = "\" \'|<>$";
    int i = 0;
    while (special_chars[i])
    {
        if (c == special_chars[i])
            return 1;
        i++;
    }
    return 0;
}

int size_ar(t_info **arr)
{
    int i = 0;
    while (arr[i])
    {
        i++;
    }
    return i;
}

t_info **appand(t_info **token, t_info *info)
{
    int size = size_ar(token);
    token = (t_info **)realloc(token, (size + 2) * sizeof(t_info *));

    // Allocate memory for the new t_info structure and its content
    token[size] = (t_info *)malloc(sizeof(t_info));
    token[size]->content = strdup(info->content); // Copy the content string
    token[size]->type = NULL; // You can set the type as needed
    token[size]->length = info->length;
    token[size + 1] = NULL;

    return token;
}

t_info **ft_split(char *s)
{
    t_info *inf = NULL;
    int end = 0;
    int start = 0;
    int i = 0;
    t_info **token = NULL;

    while (s[i])
    {
        start = i;
        if (is_whitespace(s[i]) || is_a_spchar(s[i]))
            end = i;
        int token_length = end - start;

        // Allocate memory for the token array
        token = (t_info **)malloc((i + 2) * sizeof(t_info *));
        token[i] = (t_info *)malloc(sizeof(t_info));
        token[i]->content = (char *)malloc(token_length + 1);
        strncpy(token[i]->content, &s[start], token_length);
        token[i]->content[token_length] = '\0';
        token[i]->type = NULL;
        token[i]->lenght = token_length;
        token[i + 1] = NULL;

        inf = appand(inf, token[i]);
        i++;
    }

    return token;
}

int main()
{
    char *input;
    t_info **str;

    while (1)
    {
        // display_prompt();
        input = read_input(); // Make sure you have a valid read_input() function

        str = ft_split(input);

        int i = 0;
        while (str[i])
        {
            printf("Content: %s\n", str[i]->content);
            i++;
        }

        // Free allocated memory
        for (i = 0; str[i]; i++)
        {
            free(str[i]->content);
            free(str[i]);
        }
        free(str);

        // You may also need to free 'input' here if it's dynamically allocated
    }

    return 0;
}
